/*
 * Take an image (Pixels) and find all black blobs/objects within it.
 *
 *   const Blobs blobs(img);
 *   for (const CoordPair& b : blobs)
 *     std::cout << b.first << std::endl;
 */

#ifndef H_BLOBS
#define H_BLOBS

#include <map>
#include <set>
#include <array>
#include <vector>
#include <algorithm>

#include "log.h"
#include "blobs.h"
#include "pixels.h"
#include "maputils.h"
#include "disjointset.h"

// Remember the first and last times we saw a label so we can search just part
// of the image when updating a label.
struct CoordPair
{
    Coord first;
    Coord last;

    CoordPair() { }
    CoordPair(const Coord& f, const Coord& l)
        :first(f), last(l) { }
};

template<class N>
class Blobs
{
public:
    static const int default_label;
    typedef std::map<int, CoordPair>::size_type size_type;
    typedef MapValueIterator<std::map<int, CoordPair>> const_iterator;

private:
    int w = 0;
    int h = 0;
    DisjointSet<int> set;
    std::map<int, CoordPair> objs;
    std::vector<std::vector<int>> labels;

public:
    Blobs(const Pixels<N>& img);
    int label(const Coord& p) const;
    CoordPair object(int label) const;

    // Allow moving
    Blobs(Blobs&&);
    Blobs& operator=(Blobs&& other);

    // Get all first points that have part of the object in the rectangle
    // around p1 and p2 (with p1 to the left and above p2).
    std::vector<Coord> in(const Coord& p1, const Coord& p2) const;

    // Get all the first points of the label within a rectangle around
    // the points p1 and p2. This assumes that p2 is down and to the right
    // of p1.
    std::vector<Coord> startIn(const Coord& p1, const Coord& p2) const;

    // Standard functions
    const_iterator begin() const { return objs.begin(); }
    const_iterator end() const { return objs.end(); }
    size_type size() const { return objs.size(); }

private:
    // Merge object o into object n by changing labels and updating object
    void switchLabel(int old_label, int new_label);
};

/*
 * Implementation
 */

template<class N>
const int Blobs<N>::default_label = 0;

template<class N>
Blobs<N>::Blobs(Blobs&& other)
    : w(other.w), h(other.h), set(std::move(other.set)),
      objs(std::move(other.objs)), labels(std::move(other.labels))
{
}

template<class N>
Blobs<N>& Blobs<N>::operator=(Blobs<N>&& other)
{
    w = other.w;
    h = other.h;
    set = std::move(other.set);
    objs = std::move(other.objs);
    labels = std::move(other.labels);

    return *this;
}

template<class N>
Blobs<N>::Blobs(const Pixels<N>& img)
    : set(default_label)
{
    w = img.width();
    h = img.height();
    labels = std::vector<std::vector<int>>(h, std::vector<int>(w, default_label));

    int next_label = default_label+1;

    // Go through points making them part of bordering objects if next to one
    // already and otherwise a new object, skip the first row and column
    for (int y = 1; y < h; ++y)
    {
        for (int x = 1; x < w; ++x)
        {
            const Coord point(x, y);
            const std::array<unsigned char, N> current_color = img.color(point);

            const std::array<Coord, 4> points = {{
                Coord(x-1, y),   // Left
                Coord(x-1, y-1), // Up left
                Coord(x,   y-1), // Up
                Coord(x+1, y-1)  // Up right
            }};

            // Conditions we care about:
            //   One neighboring pixel is the same color
            //   Multiple black, all the same label
            //   Multiple black, not all the same labels
            //
            // We can determine this by counting the number of black pixels
            // around us and knowing if two are different.
            int count = 0;
            bool different = false;
            std::vector<int> equivalent_labels;

            // We will have at most four since the current pixel takes on
            // the label of one of these 4 surrounding pixels
            equivalent_labels.reserve(4);

            for (const Coord& p : points)
            {
                if (img.color(p) == current_color)
                {
                    if (count == 0)
                    {
                        labels[y][x] = labels[p.y][p.x];
                    }
                    // Detect when we have multiple pixels of this color around
                    // us with different labels
                    else if (labels[y][x] != labels[p.y][p.x])
                    {
                        different = true;
                        equivalent_labels.push_back(labels[p.y][p.x]);
                    }

                    ++count;
                }
            }

            // No neighboring pixels the same color
            if (count == 0)
            {
                // New label for a potentially new object
                labels[y][x] = next_label;
                set.add(next_label);

                ++next_label;
            }
            // Multiple black with different labels
            else if (count > 1 && different)
            {
                // Save that these are all equivalent to the current one
                for (int label : equivalent_labels)
                    set.join(labels[y][x], label);
            }
            // Otherwise: One neighbor black or multiple but all same label,
            // and we already set the current pixel's label
        }
    }

    // Go through again reducing the labeling equivalences
    for (int y = 0; y < h; ++y)
    {
        for (int x = 0; x < w; ++x)
        {
            const Coord point(x, y);
            int currentLabel = labels[y][x];

            if (currentLabel != default_label)
            {
                int repLabel = set.find(currentLabel);

                if (repLabel != set.notfound())
                {
                    labels[y][x] = repLabel;

                    // If not found, add this object
                    if (objs.find(repLabel) == objs.end())
                        objs[repLabel] = CoordPair(point, point);
                    // If it is found, this is the last place we've seen the object
                    else
                        objs[repLabel].last = point;
                }
                else
                {
                    log("couldn't find representative of label");
                }
            }
        }
    }
}

template<class N>
int Blobs<n>::label(const Coord& p) const
{
    if (p.x >= 0 && p.x < w &&
        p.y >= 0 && p.y < h)
        return labels[p.y][p.x];
    else
        return default_label;
}

template<class N>
std::vector<Coord> Blobs<N>::in(const Coord& p1, const Coord& p2) const
{
    std::set<int> used_labels;
    std::vector<Coord> subset;

    for (int y = p1.y; y < p2.y; ++y)
    {
        for (int x = p1.x; x < p2.x; ++x)
        {
            if (labels[y][x] != default_label &&
                    used_labels.find(labels[y][x]) == used_labels.end())
            {
                const std::map<int, CoordPair>::const_iterator obj = objs.find(labels[y][x]);

                if (obj != objs.end())
                {
                    subset.push_back(obj->second.first);
                    used_labels.insert(labels[y][x]);
                }
                else
                {
                    log("couldn't find object with label");
                }
            }
        }
    }

    return subset;
}

template<class N>
std::vector<Coord> Blobs<N>::startIn(const Coord& p1, const Coord& p2) const
{
    std::vector<Coord> subset;

    for (const std::pair<int, CoordPair>& p : objs)
    {
        if (p.second.first.y >= p1.y && p.second.first.y <= p2.y &&
            p.second.first.x >= p1.x && p.second.first.x <= p2.x)
            subset.push_back(p.second.first);

        // Break early when we've gone past it
        else if (p.second.first.y > p2.y)
            break;
    }

    return subset;
}

template<class N>
CoordPair Blobs<N>::object(int label) const
{
    const std::map<int, CoordPair>::const_iterator obj = objs.find(label);

    if (obj != objs.end())
        return obj->second;
    else
        return CoordPair();
}

#endif
